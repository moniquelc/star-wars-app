{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","name","gender","height","mass","hair_color","skin_color","birth_year","CardList","characters","map","user","i","components_Card","key","Scroll","props","style","overflowY","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","Promise","all","url","fetch","then","resp","json","results","fullResults","reduce","acc","item","concat","_this$state","filteredCharacters","filter","character","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAeeA,EAbG,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,aACnB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACCC,UAAU,oEACVC,KAAK,SACLC,YAAY,mBACZC,SAAUP,MCOCQ,EAdF,SAAAT,GAAwE,IAArEU,EAAqEV,EAArEU,KAAMC,EAA+DX,EAA/DW,OAAQC,EAAuDZ,EAAvDY,OAAQC,EAA+Cb,EAA/Ca,KAAMC,EAAyCd,EAAzCc,WAAYC,EAA6Bf,EAA7Be,WAAYC,EAAiBhB,EAAjBgB,WACnE,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iEACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUK,GACxBR,EAAAC,EAAAC,cAAA,oBAAYO,GACZT,EAAAC,EAAAC,cAAA,oBAAYQ,GACZV,EAAAC,EAAAC,cAAA,kBAAUS,GACVX,EAAAC,EAAAC,cAAA,wBAAgBU,GAChBZ,EAAAC,EAAAC,cAAA,wBAAgBW,GAChBb,EAAAC,EAAAC,cAAA,wBAAgBY,KCeJC,EAvBE,SAAAjB,GAAkB,IAAhBkB,EAAgBlB,EAAhBkB,WAClB,OACChB,EAAAC,EAAAC,cAAA,WAEEc,EAAWC,IAAI,SAACC,EAAMC,GACrB,OACCnB,EAAAC,EAAAC,cAACkB,EAAD,CACCC,IAAKF,EACLX,KAAMQ,EAAWG,GAAGX,KACpBC,OAAQO,EAAWG,GAAGV,OACtBC,OAAQM,EAAWG,GAAGT,OACtBC,KAAMK,EAAWG,GAAGR,KACpBC,WAAYI,EAAWG,GAAGP,WAC1BC,WAAYG,EAAWG,GAAGN,WAC1BC,WAAYE,EAAWG,GAAGL,iBCPlBQ,EARA,SAACC,GACf,OACCvB,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBhB,OAAO,UACjEa,EAAMI,WCyDKC,qBAvDd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA8BDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SA9BzCZ,EAAKa,MAAM,CACV1B,WAAY,GACZuB,YAAa,IAJDV,mFAQM,IAAAc,EAAAX,KAanBY,QAAQC,IAZI,CACX,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,uCAGgB5B,IAAI,SAAA6B,GACpB,OAAOC,MAAMD,GAAKE,KAAK,SAAAC,GAAI,OAAIA,EAAKC,YACjCF,KAAK,SAAAG,GACR,IAAMC,EAAcD,EAAQE,OAAO,SAACC,EAAKC,GACrC,OAAOD,EAAIE,OAAOD,EAAKJ,UACxB,IACHR,EAAKL,SAAS,CAACtB,WAAYoC,uCAQnB,IAAAK,EAC2BzB,KAAKU,MAAjC1B,EADCyC,EACDzC,WAAYuB,EADXkB,EACWlB,YACbmB,EAAqB1C,EAAW2C,OAAO,SAAAC,GAC7C,OAAOA,EAAUpD,KAAKqD,cAAcC,SAASvB,EAAYsB,iBAEvD,OAAQ7C,EAAW+C,OAGjB/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,+BACAH,EAAAC,EAAAC,cAAC8D,EAAD,CAAWjE,aAAciC,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAC+D,EAAD,KACCjE,EAAAC,EAAAC,cAACgE,EAAD,CAAUlD,WAAY0C,MAP9B1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,kBA1CgBgE,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.2698d23a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='f3 tc yellow bg-dark-gray  shadow-3 grow br2 ba b--yellow pointer' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search character'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t />\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({ name, gender, height, mass, hair_color, skin_color, birth_year }) => {\r\n\treturn(\r\n\t\t<div className='tc bg-mid-gray dib outline w-20 pa3 mr2 ma3 br2 grow shadow-3'>\r\n\t\t\t<h2 className='yellow'>{name}</h2>\r\n\t\t\t<p>Gender: {gender}</p>\r\n\t\t\t<p>Height: {height}</p>\r\n\t\t\t<p>Mass: {mass}</p>\r\n\t\t\t<p>Hair color: {hair_color}</p>\r\n\t\t\t<p>Skin color: {skin_color}</p>\r\n\t\t\t<p>Birth year: {birth_year}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({characters}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tcharacters.map((user, i) => {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tname={characters[i].name} \r\n\t\t\t\t\t\t\tgender={characters[i].gender}\r\n\t\t\t\t\t\t\theight={characters[i].height}\r\n\t\t\t\t\t\t\tmass={characters[i].mass}\r\n\t\t\t\t\t\t\thair_color={characters[i].hair_color}\r\n\t\t\t\t\t\t\tskin_color={characters[i].skin_color}\r\n\t\t\t\t\t\t\tbirth_year={characters[i].birth_year}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border:'1px solid black', height:'525px'}} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport SearchBox from './components/SearchBox';\r\nimport CardList from './components/CardList';\r\nimport Scroll from './components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\tcharacters: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst urls= [\r\n\t\t\t'https://swapi.co/api/people/?page=1',\r\n\t\t\t'https://swapi.co/api/people/?page=2',\r\n\t\t\t'https://swapi.co/api/people/?page=3',\r\n\t\t\t'https://swapi.co/api/people/?page=4',\r\n\t\t\t'https://swapi.co/api/people/?page=5',\r\n\t\t\t'https://swapi.co/api/people/?page=6',\r\n\t\t\t'https://swapi.co/api/people/?page=7',\r\n\t\t\t'https://swapi.co/api/people/?page=8',\r\n\t\t\t'https://swapi.co/api/people/?page=9'\r\n\t\t]\r\n\t\t\r\n\t\tPromise.all(urls.map(url => {\r\n\t\t\treturn fetch(url).then(resp => resp.json())\r\n\t\t})).then(results => {\r\n\t\t\tconst fullResults = results.reduce((acc, item) => {\r\n\t\t    \treturn acc.concat(item.results);\r\n\t\t\t}, []);\r\n\t\t\tthis.setState({characters: fullResults});\r\n\t\t\t})\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\r\n \trender() {\r\n\t\tconst { characters, searchfield } = this.state;\r\n \t\tconst filteredCharacters = characters.filter(character => {\r\n\t\t\treturn character.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t    return !characters.length ?\r\n\t\t<h1 className='tc yellow'>Loading</h1> :\r\n\t\t(\r\n\t      <div className='tc'>\r\n\t        <h1 className='f1 yellow'> Star Wars Characters Guide</h1>\r\n\t        <SearchBox searchChange={this.onSearchChange}/>\r\n\t        <p></p>\r\n\t        <Scroll>\r\n\t        \t<CardList characters={filteredCharacters}/>\r\n\t        </Scroll>\r\n\t      </div>\r\n\t    );\r\n \t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}